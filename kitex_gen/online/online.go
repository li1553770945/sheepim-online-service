// Code generated by thriftgo (0.3.1). DO NOT EDIT.

package online

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/li1553770945/sheepim-online-service/kitex_gen/base"
	"strings"
)

type SetClientStatusReq struct {
	ClientId       string `thrift:"clientId,1,required" frugal:"1,required,string" json:"clientId"`
	ServerEndpoint string `thrift:"serverEndpoint,2,required" frugal:"2,required,string" json:"serverEndpoint"`
	IsOnline       bool   `thrift:"isOnline,3,required" frugal:"3,required,bool" json:"isOnline"`
}

func NewSetClientStatusReq() *SetClientStatusReq {
	return &SetClientStatusReq{}
}

func (p *SetClientStatusReq) InitDefault() {
	*p = SetClientStatusReq{}
}

func (p *SetClientStatusReq) GetClientId() (v string) {
	return p.ClientId
}

func (p *SetClientStatusReq) GetServerEndpoint() (v string) {
	return p.ServerEndpoint
}

func (p *SetClientStatusReq) GetIsOnline() (v bool) {
	return p.IsOnline
}
func (p *SetClientStatusReq) SetClientId(val string) {
	p.ClientId = val
}
func (p *SetClientStatusReq) SetServerEndpoint(val string) {
	p.ServerEndpoint = val
}
func (p *SetClientStatusReq) SetIsOnline(val bool) {
	p.IsOnline = val
}

var fieldIDToName_SetClientStatusReq = map[int16]string{
	1: "clientId",
	2: "serverEndpoint",
	3: "isOnline",
}

func (p *SetClientStatusReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClientId bool = false
	var issetServerEndpoint bool = false
	var issetIsOnline bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClientId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetServerEndpoint = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsOnline = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClientId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetServerEndpoint {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIsOnline {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetClientStatusReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SetClientStatusReq[fieldId]))
}

func (p *SetClientStatusReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientId = v
	}
	return nil
}

func (p *SetClientStatusReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServerEndpoint = v
	}
	return nil
}

func (p *SetClientStatusReq) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsOnline = v
	}
	return nil
}

func (p *SetClientStatusReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetClientStatusReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetClientStatusReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clientId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClientId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetClientStatusReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serverEndpoint", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServerEndpoint); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetClientStatusReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isOnline", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsOnline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SetClientStatusReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetClientStatusReq(%+v)", *p)
}

func (p *SetClientStatusReq) DeepEqual(ano *SetClientStatusReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClientId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ServerEndpoint) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsOnline) {
		return false
	}
	return true
}

func (p *SetClientStatusReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClientId, src) != 0 {
		return false
	}
	return true
}
func (p *SetClientStatusReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ServerEndpoint, src) != 0 {
		return false
	}
	return true
}
func (p *SetClientStatusReq) Field3DeepEqual(src bool) bool {

	if p.IsOnline != src {
		return false
	}
	return true
}

type SetClientStatusResp struct {
	BaseResp *base.BaseResp `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
}

func NewSetClientStatusResp() *SetClientStatusResp {
	return &SetClientStatusResp{}
}

func (p *SetClientStatusResp) InitDefault() {
	*p = SetClientStatusResp{}
}

var SetClientStatusResp_BaseResp_DEFAULT *base.BaseResp

func (p *SetClientStatusResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return SetClientStatusResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SetClientStatusResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SetClientStatusResp = map[int16]string{
	1: "baseResp",
}

func (p *SetClientStatusResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SetClientStatusResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetClientStatusResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SetClientStatusResp[fieldId]))
}

func (p *SetClientStatusResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *SetClientStatusResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetClientStatusResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetClientStatusResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetClientStatusResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetClientStatusResp(%+v)", *p)
}

func (p *SetClientStatusResp) DeepEqual(ano *SetClientStatusResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SetClientStatusResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetOnlineMemberEndpointReq struct {
	ClientIdList []string `thrift:"clientIdList,1,required" frugal:"1,required,list<string>" json:"clientIdList"`
}

func NewGetOnlineMemberEndpointReq() *GetOnlineMemberEndpointReq {
	return &GetOnlineMemberEndpointReq{}
}

func (p *GetOnlineMemberEndpointReq) InitDefault() {
	*p = GetOnlineMemberEndpointReq{}
}

func (p *GetOnlineMemberEndpointReq) GetClientIdList() (v []string) {
	return p.ClientIdList
}
func (p *GetOnlineMemberEndpointReq) SetClientIdList(val []string) {
	p.ClientIdList = val
}

var fieldIDToName_GetOnlineMemberEndpointReq = map[int16]string{
	1: "clientIdList",
}

func (p *GetOnlineMemberEndpointReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClientIdList bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClientIdList = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClientIdList {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetOnlineMemberEndpointReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetOnlineMemberEndpointReq[fieldId]))
}

func (p *GetOnlineMemberEndpointReq) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ClientIdList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ClientIdList = append(p.ClientIdList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetOnlineMemberEndpointReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOnlineMemberEndpointReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetOnlineMemberEndpointReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clientIdList", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ClientIdList)); err != nil {
		return err
	}
	for _, v := range p.ClientIdList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetOnlineMemberEndpointReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOnlineMemberEndpointReq(%+v)", *p)
}

func (p *GetOnlineMemberEndpointReq) DeepEqual(ano *GetOnlineMemberEndpointReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClientIdList) {
		return false
	}
	return true
}

func (p *GetOnlineMemberEndpointReq) Field1DeepEqual(src []string) bool {

	if len(p.ClientIdList) != len(src) {
		return false
	}
	for i, v := range p.ClientIdList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type ClientStatusData struct {
	ClientId       string `thrift:"clientId,1,required" frugal:"1,required,string" json:"clientId"`
	ServerEndpoint string `thrift:"serverEndpoint,2,required" frugal:"2,required,string" json:"serverEndpoint"`
	IsOnline       bool   `thrift:"isOnline,3,required" frugal:"3,required,bool" json:"isOnline"`
}

func NewClientStatusData() *ClientStatusData {
	return &ClientStatusData{}
}

func (p *ClientStatusData) InitDefault() {
	*p = ClientStatusData{}
}

func (p *ClientStatusData) GetClientId() (v string) {
	return p.ClientId
}

func (p *ClientStatusData) GetServerEndpoint() (v string) {
	return p.ServerEndpoint
}

func (p *ClientStatusData) GetIsOnline() (v bool) {
	return p.IsOnline
}
func (p *ClientStatusData) SetClientId(val string) {
	p.ClientId = val
}
func (p *ClientStatusData) SetServerEndpoint(val string) {
	p.ServerEndpoint = val
}
func (p *ClientStatusData) SetIsOnline(val bool) {
	p.IsOnline = val
}

var fieldIDToName_ClientStatusData = map[int16]string{
	1: "clientId",
	2: "serverEndpoint",
	3: "isOnline",
}

func (p *ClientStatusData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetClientId bool = false
	var issetServerEndpoint bool = false
	var issetIsOnline bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetClientId = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetServerEndpoint = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsOnline = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetClientId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetServerEndpoint {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetIsOnline {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClientStatusData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ClientStatusData[fieldId]))
}

func (p *ClientStatusData) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ClientId = v
	}
	return nil
}

func (p *ClientStatusData) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServerEndpoint = v
	}
	return nil
}

func (p *ClientStatusData) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsOnline = v
	}
	return nil
}

func (p *ClientStatusData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClientStatusData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClientStatusData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("clientId", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ClientId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ClientStatusData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("serverEndpoint", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServerEndpoint); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ClientStatusData) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("isOnline", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsOnline); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ClientStatusData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClientStatusData(%+v)", *p)
}

func (p *ClientStatusData) DeepEqual(ano *ClientStatusData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClientId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ServerEndpoint) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsOnline) {
		return false
	}
	return true
}

func (p *ClientStatusData) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ClientId, src) != 0 {
		return false
	}
	return true
}
func (p *ClientStatusData) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ServerEndpoint, src) != 0 {
		return false
	}
	return true
}
func (p *ClientStatusData) Field3DeepEqual(src bool) bool {

	if p.IsOnline != src {
		return false
	}
	return true
}

type GetOnlineMemberEndpointResp struct {
	BaseResp *base.BaseResp      `thrift:"baseResp,1,required" frugal:"1,required,base.BaseResp" json:"baseResp"`
	Status   []*ClientStatusData `thrift:"status,2,optional" frugal:"2,optional,list<ClientStatusData>" json:"status,omitempty"`
}

func NewGetOnlineMemberEndpointResp() *GetOnlineMemberEndpointResp {
	return &GetOnlineMemberEndpointResp{}
}

func (p *GetOnlineMemberEndpointResp) InitDefault() {
	*p = GetOnlineMemberEndpointResp{}
}

var GetOnlineMemberEndpointResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetOnlineMemberEndpointResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetOnlineMemberEndpointResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var GetOnlineMemberEndpointResp_Status_DEFAULT []*ClientStatusData

func (p *GetOnlineMemberEndpointResp) GetStatus() (v []*ClientStatusData) {
	if !p.IsSetStatus() {
		return GetOnlineMemberEndpointResp_Status_DEFAULT
	}
	return p.Status
}
func (p *GetOnlineMemberEndpointResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *GetOnlineMemberEndpointResp) SetStatus(val []*ClientStatusData) {
	p.Status = val
}

var fieldIDToName_GetOnlineMemberEndpointResp = map[int16]string{
	1: "baseResp",
	2: "status",
}

func (p *GetOnlineMemberEndpointResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetOnlineMemberEndpointResp) IsSetStatus() bool {
	return p.Status != nil
}

func (p *GetOnlineMemberEndpointResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetBaseResp bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetBaseResp = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetBaseResp {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetOnlineMemberEndpointResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetOnlineMemberEndpointResp[fieldId]))
}

func (p *GetOnlineMemberEndpointResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetOnlineMemberEndpointResp) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Status = make([]*ClientStatusData, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewClientStatusData()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Status = append(p.Status, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetOnlineMemberEndpointResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOnlineMemberEndpointResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetOnlineMemberEndpointResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("baseResp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetOnlineMemberEndpointResp) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Status)); err != nil {
			return err
		}
		for _, v := range p.Status {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetOnlineMemberEndpointResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOnlineMemberEndpointResp(%+v)", *p)
}

func (p *GetOnlineMemberEndpointResp) DeepEqual(ano *GetOnlineMemberEndpointResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *GetOnlineMemberEndpointResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetOnlineMemberEndpointResp) Field2DeepEqual(src []*ClientStatusData) bool {

	if len(p.Status) != len(src) {
		return false
	}
	for i, v := range p.Status {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type OnlineService interface {
	SetClientStatus(ctx context.Context, req *SetClientStatusReq) (r *SetClientStatusResp, err error)

	GetOnlineMemberEndpoint(ctx context.Context, req *GetOnlineMemberEndpointReq) (r *GetOnlineMemberEndpointResp, err error)
}

type OnlineServiceClient struct {
	c thrift.TClient
}

func NewOnlineServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OnlineServiceClient {
	return &OnlineServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewOnlineServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OnlineServiceClient {
	return &OnlineServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewOnlineServiceClient(c thrift.TClient) *OnlineServiceClient {
	return &OnlineServiceClient{
		c: c,
	}
}

func (p *OnlineServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *OnlineServiceClient) SetClientStatus(ctx context.Context, req *SetClientStatusReq) (r *SetClientStatusResp, err error) {
	var _args OnlineServiceSetClientStatusArgs
	_args.Req = req
	var _result OnlineServiceSetClientStatusResult
	if err = p.Client_().Call(ctx, "SetClientStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *OnlineServiceClient) GetOnlineMemberEndpoint(ctx context.Context, req *GetOnlineMemberEndpointReq) (r *GetOnlineMemberEndpointResp, err error) {
	var _args OnlineServiceGetOnlineMemberEndpointArgs
	_args.Req = req
	var _result OnlineServiceGetOnlineMemberEndpointResult
	if err = p.Client_().Call(ctx, "GetOnlineMemberEndpoint", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type OnlineServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      OnlineService
}

func (p *OnlineServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *OnlineServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *OnlineServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewOnlineServiceProcessor(handler OnlineService) *OnlineServiceProcessor {
	self := &OnlineServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("SetClientStatus", &onlineServiceProcessorSetClientStatus{handler: handler})
	self.AddToProcessorMap("GetOnlineMemberEndpoint", &onlineServiceProcessorGetOnlineMemberEndpoint{handler: handler})
	return self
}
func (p *OnlineServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type onlineServiceProcessorSetClientStatus struct {
	handler OnlineService
}

func (p *onlineServiceProcessorSetClientStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OnlineServiceSetClientStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetClientStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := OnlineServiceSetClientStatusResult{}
	var retval *SetClientStatusResp
	if retval, err2 = p.handler.SetClientStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetClientStatus: "+err2.Error())
		oprot.WriteMessageBegin("SetClientStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SetClientStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type onlineServiceProcessorGetOnlineMemberEndpoint struct {
	handler OnlineService
}

func (p *onlineServiceProcessorGetOnlineMemberEndpoint) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OnlineServiceGetOnlineMemberEndpointArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetOnlineMemberEndpoint", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := OnlineServiceGetOnlineMemberEndpointResult{}
	var retval *GetOnlineMemberEndpointResp
	if retval, err2 = p.handler.GetOnlineMemberEndpoint(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetOnlineMemberEndpoint: "+err2.Error())
		oprot.WriteMessageBegin("GetOnlineMemberEndpoint", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetOnlineMemberEndpoint", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type OnlineServiceSetClientStatusArgs struct {
	Req *SetClientStatusReq `thrift:"req,1" frugal:"1,default,SetClientStatusReq" json:"req"`
}

func NewOnlineServiceSetClientStatusArgs() *OnlineServiceSetClientStatusArgs {
	return &OnlineServiceSetClientStatusArgs{}
}

func (p *OnlineServiceSetClientStatusArgs) InitDefault() {
	*p = OnlineServiceSetClientStatusArgs{}
}

var OnlineServiceSetClientStatusArgs_Req_DEFAULT *SetClientStatusReq

func (p *OnlineServiceSetClientStatusArgs) GetReq() (v *SetClientStatusReq) {
	if !p.IsSetReq() {
		return OnlineServiceSetClientStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OnlineServiceSetClientStatusArgs) SetReq(val *SetClientStatusReq) {
	p.Req = val
}

var fieldIDToName_OnlineServiceSetClientStatusArgs = map[int16]string{
	1: "req",
}

func (p *OnlineServiceSetClientStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnlineServiceSetClientStatusArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnlineServiceSetClientStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OnlineServiceSetClientStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSetClientStatusReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OnlineServiceSetClientStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetClientStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnlineServiceSetClientStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OnlineServiceSetClientStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnlineServiceSetClientStatusArgs(%+v)", *p)
}

func (p *OnlineServiceSetClientStatusArgs) DeepEqual(ano *OnlineServiceSetClientStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OnlineServiceSetClientStatusArgs) Field1DeepEqual(src *SetClientStatusReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type OnlineServiceSetClientStatusResult struct {
	Success *SetClientStatusResp `thrift:"success,0,optional" frugal:"0,optional,SetClientStatusResp" json:"success,omitempty"`
}

func NewOnlineServiceSetClientStatusResult() *OnlineServiceSetClientStatusResult {
	return &OnlineServiceSetClientStatusResult{}
}

func (p *OnlineServiceSetClientStatusResult) InitDefault() {
	*p = OnlineServiceSetClientStatusResult{}
}

var OnlineServiceSetClientStatusResult_Success_DEFAULT *SetClientStatusResp

func (p *OnlineServiceSetClientStatusResult) GetSuccess() (v *SetClientStatusResp) {
	if !p.IsSetSuccess() {
		return OnlineServiceSetClientStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OnlineServiceSetClientStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetClientStatusResp)
}

var fieldIDToName_OnlineServiceSetClientStatusResult = map[int16]string{
	0: "success",
}

func (p *OnlineServiceSetClientStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OnlineServiceSetClientStatusResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnlineServiceSetClientStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OnlineServiceSetClientStatusResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSetClientStatusResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OnlineServiceSetClientStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetClientStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnlineServiceSetClientStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *OnlineServiceSetClientStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnlineServiceSetClientStatusResult(%+v)", *p)
}

func (p *OnlineServiceSetClientStatusResult) DeepEqual(ano *OnlineServiceSetClientStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OnlineServiceSetClientStatusResult) Field0DeepEqual(src *SetClientStatusResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type OnlineServiceGetOnlineMemberEndpointArgs struct {
	Req *GetOnlineMemberEndpointReq `thrift:"req,1" frugal:"1,default,GetOnlineMemberEndpointReq" json:"req"`
}

func NewOnlineServiceGetOnlineMemberEndpointArgs() *OnlineServiceGetOnlineMemberEndpointArgs {
	return &OnlineServiceGetOnlineMemberEndpointArgs{}
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) InitDefault() {
	*p = OnlineServiceGetOnlineMemberEndpointArgs{}
}

var OnlineServiceGetOnlineMemberEndpointArgs_Req_DEFAULT *GetOnlineMemberEndpointReq

func (p *OnlineServiceGetOnlineMemberEndpointArgs) GetReq() (v *GetOnlineMemberEndpointReq) {
	if !p.IsSetReq() {
		return OnlineServiceGetOnlineMemberEndpointArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OnlineServiceGetOnlineMemberEndpointArgs) SetReq(val *GetOnlineMemberEndpointReq) {
	p.Req = val
}

var fieldIDToName_OnlineServiceGetOnlineMemberEndpointArgs = map[int16]string{
	1: "req",
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnlineServiceGetOnlineMemberEndpointArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetOnlineMemberEndpointReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOnlineMemberEndpoint_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnlineServiceGetOnlineMemberEndpointArgs(%+v)", *p)
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) DeepEqual(ano *OnlineServiceGetOnlineMemberEndpointArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OnlineServiceGetOnlineMemberEndpointArgs) Field1DeepEqual(src *GetOnlineMemberEndpointReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type OnlineServiceGetOnlineMemberEndpointResult struct {
	Success *GetOnlineMemberEndpointResp `thrift:"success,0,optional" frugal:"0,optional,GetOnlineMemberEndpointResp" json:"success,omitempty"`
}

func NewOnlineServiceGetOnlineMemberEndpointResult() *OnlineServiceGetOnlineMemberEndpointResult {
	return &OnlineServiceGetOnlineMemberEndpointResult{}
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) InitDefault() {
	*p = OnlineServiceGetOnlineMemberEndpointResult{}
}

var OnlineServiceGetOnlineMemberEndpointResult_Success_DEFAULT *GetOnlineMemberEndpointResp

func (p *OnlineServiceGetOnlineMemberEndpointResult) GetSuccess() (v *GetOnlineMemberEndpointResp) {
	if !p.IsSetSuccess() {
		return OnlineServiceGetOnlineMemberEndpointResult_Success_DEFAULT
	}
	return p.Success
}
func (p *OnlineServiceGetOnlineMemberEndpointResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetOnlineMemberEndpointResp)
}

var fieldIDToName_OnlineServiceGetOnlineMemberEndpointResult = map[int16]string{
	0: "success",
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnlineServiceGetOnlineMemberEndpointResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetOnlineMemberEndpointResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetOnlineMemberEndpoint_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnlineServiceGetOnlineMemberEndpointResult(%+v)", *p)
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) DeepEqual(ano *OnlineServiceGetOnlineMemberEndpointResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *OnlineServiceGetOnlineMemberEndpointResult) Field0DeepEqual(src *GetOnlineMemberEndpointResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
